name: LaTeX compiler

on:
  #triggered when PR is (re)opened or synchronized (new commit to head)
  pull_request:
    types: [opened, reopened, synchronize, closed]
    paths:
      - '**.tex'

jobs:
  compile:
    runs-on: ubuntu-latest
    outputs:
      file_path: '${{ steps.path.outputs.FILE_PATH }}'
      file_name: '${{ steps.name.outputs.FILE_NAME }}'

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: List changed files
        id: files
        uses: tj-actions/changed-files@v40
        with:
          format: 'space-delimited'
          files: |
             **.tex
      - name: Extract path
        id: path
        run: |
          FILES="${{ steps.files.outputs.all_changed_files }}"
          echo "FILE_PATH=$(dirname "$FILES")" >> $GITHUB_OUTPUT
      - name: Extract name w/o extension
        id: name
        run: |
          FILES="${{ steps.files.outputs.all_changed_files }}"
          echo "FILE_NAME=$(basename "${FILES}" .tex)" >> $GITHUB_OUTPUT
      - name: Output
        run: |
          echo "::notice::Modified files: ${{ steps.files.outputs.all_changed_files }}"
          echo "::notice::Path: ${{ steps.path.outputs.FILE_PATH }}"
          echo "::notice::File: ${{ steps.name.outputs.FILE_NAME }}"
      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v3
        with:
          root_file: |
            ${{ steps.name.outputs.FILE_NAME }}.tex
          working_directory: ${{ github.workspace }}/${{ steps.path.outputs.FILE_PATH }}
      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.name.outputs.FILE_NAME }}.pdf
          path: ${{ github.workspace }}/${{ steps.path.outputs.FILE_PATH }}/${{ steps.name.outputs.FILE_NAME }}.pdf
          if-no-files-found: error
  log:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch
      - name: saving pull request information
        env:
          PR_NUMBER: "${{github.event.pull_request.number}}" 
          COMMIT_TITLE: "${{github.event.commits[0].message}}"
          AUTHOR: "${{ github.actor }}"
        run: |
          COMMIT_ID=$(echo ${{github.event.pull_request.head.sha}} | cut -c1-7)
          DATA=$(date)
          git checkout ${{ github.head_ref }}

          OLD_CONTENT=$(cat ${{ needs.compile.outputs.file_path }}/log.txt)
          NEW_CONTENT="$COMMIT_ID;$PR_NUMBER;$COMMIT_TITLE;$AUTHOR;$DATA\n"+$OLD_CONTENT 
          echo -e $NEW_CONTENT > ${{ needs.compile.outputs.file_path }}/log.txt
          

          git add ${{ needs.compile.outputs.file_path }}/log.txt
          git commit -m "Update logs file"
          git push origin ${{ github.head_ref }}
          
  publish:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: compile
    env:
      TARGET_BRANCH: 'docs'

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch
      - name: Remove older version
        run: |
          git checkout $TARGET_BRANCH
          rm -f ${{ needs.compile.outputs.file_path }}/${{ needs.compile.outputs.file_name }}.pdf
          git rm --ignore-unmatch ${{ needs.compile.outputs.file_path }}/${{ needs.compile.outputs.file_name }}.pdf
      - name: Grab document
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.compile.outputs.file_name }}.pdf
          path: ${{ github.workspace }}/${{ needs.compile.outputs.file_path }}
      - name: Publish document
        run: |
          git add ${{ needs.compile.outputs.file_path }}/${{ needs.compile.outputs.file_name }}.pdf
          git commit -am "Publish document ${{ needs.compile.outputs.file_name }}.pdf"
          git push origin $TARGET_BRANCH
